#!/usr/bin/php
<?php
include_once 'miners-settlement-init.php';
include_once 'local/minersmain.class.php';

$main = new MinersMain(array(
   'debugLevel'     => 0,
   'errorReporting' => false,
   'sessionStart'   => array('read_and_close' => true),
   'memoryLimit'    => null,
   'sendHeaders'    => true,
   'database'       => true,
   'input'          => true,
   'html'           => true,
   'adminlte'       => true,
));

$main->buildClass('constants','Constants',null,'local/constants.class.php');
$main->buildClass('simulator','Simulator',array('db' => $main->db()),'local/simulator.class.php');

$simulator = $main->obj('simulator');

$opts = getopt(null,array('verbose','short','debug:','type:','area:','attacker:','aname:','defender:','iterations:','godroll','enhance:','adjust:','equip:','runes:'));

$debugLevel    = $opts['debug'] ?: 0;
$verbose       = (isset($opts['verbose'])) ? true : false;
$shortResults  = (isset($opts['short'])) ? true : false;
$simulateType  = strtolower($opts['type']) ?: 'pve';
$uArea         = strtolower($opts['area']) ?: null;
$attackerName  = $opts['aname'] ?: null;
$defenderName  = $opts['defender'] ?: null;
$uIterations   = $opts['iterations'] ?: 100;
$uGodroll      = (isset($opts['godroll'])) ? true : false;
$uAdjust       = $opts['adjust'] ?: null;
$uEnhance      = $opts['enhance'] ?: null;
$uEquip        = $opts['equip'] ?: null;
$uRunes        = $opts['runes'] ?: null;

if ($uArea) { $simulateType = 'area'; }

$main->debug->level($debugLevel);

$baseConfig = array(
   'attacker'   => array('type' => 'player', 'name' => 'Player'),
   'defender'   => array('type' => 'monster', 'name' => $defenderName),
   'type'       => $simulateType,
   'iterations' => $uIterations,
   'godroll'    => $uGodroll,
   'enhance'    => $uEnhance,
   'adjust'     => $uAdjust,
   'equip'      => $uEquip,
   'runes'      => $uRunes,
   'aname'      => $attackerName,
   'label'      => $simulateType,
);

if (preg_match('/^(pve|pvp)$/i',$simulateType) && $defenderName) { 
   $simParams = $baseConfig;
   $results   = $simulator->start($simParams);

   if ($verbose) { print json_encode($results,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT)."\n"; }

   print "\n".$simulator->formatResults($results,array('short' => $shortResults, 'name' => $testName))."\n\n\n";
}
/*
else if (preg_match('/^(tower)/i',$simulateType) && $attackerBuild) {
   $testList   = array();
   $towerMobs  = array();
   $towerFiles = glob(APP_CONFIGDIR."/entity/tower-*.json");

   foreach ($towerFiles as $filePath) {
      $fileName = basename($filePath,".json");
      $floor    = sprintf("%03d",preg_replace('/^tower\-/','',$fileName));
      $towerMobs[$floor] = $fileName;
   }

   ksort($towerMobs);

   foreach ($towerMobs as $floor => $mobFile) {
      $testConfig = $baseConfig;

      $testConfig['defender'] = array('id' => $mobFile);
      $testConfig['label']    = $mobFile;

      $testList[$mobFile] = $testConfig;
   }

   $progress = 0;

   foreach ($testList as $testName => $testInfo) {
      $progress++;

      $results = $simulator->start($testInfo);

      if ($progress == 1) { print "\n".$simulator->showGear($results)."\n"; }

      if ($verbose) { json_encode($results,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT)."\n"; }

      printf("%25s: %6s\n",$results['defender']['name'],$results['attacker']['chance.win']);
   }
}
else if (preg_match('/^(area)/i',$simulateType) && $attackerBuild) {
   $testAreas = array(
      'mitar' => array(
         'goblin-knocker' => array(),
         'hobgoblin' => array(),
         'stone-spider' => array(),
         'uhr-rahz' => array(),
      ),
   );
   
   if (!$testAreas[$uArea]) { print "\nUnknown area specified.\n\n"; exit; }
   
   $testList = $testAreas[$uArea];
   
   foreach ($testList as $defenderId => $testSetup) {
      $testName   = $defenderId;
      $testConfig = $baseConfig;
   
      $testConfig['defender']['id'] = $defenderId;
      $testConfig['label']          = ucfirst($uArea).' '.$testName;
   
      $tests[$testName] = $testConfig;
   }
   
   $progress = 0;
   
   foreach ($tests as $testName => $testInfo) {
      $progress++;
      //print "\nStarting test $testName ".json_encode($testInfo)."\n\n";
   
      $results = $simulator->start($testInfo);
   
      if ($progress == 1) { print "\n".$simulator->showGear($results)."\n"; }

      if ($verbose) { print json_encode($results,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT)."\n"; }

      printf("%20s: %s\n",$results['defender']['name'],$results['attacker']['chance.win']);

      //print $simulator->formatResults($results,array('short' => $shortResults, 'name' => $testName))."\n\n\n";
   }
}
else if (preg_match('/^(minimum)/i',$simulateType) && $uEquip) {
   // --maxenhance (level to stop at) --chancewin (threshold to win in %)
   $maxEnhance   = 10;
   $winThreshold = 100;
   
   $equipment = json_decode($uEquip,true);
   
   $simInfo  = array();
   $gearData = array();
   
   foreach ($equipment as $gearType => $gearInfo) {
      $gearData['equip'][$gearType]  = array('name' => $gearInfo['name'], 'level' => 0);
      $gearData['adjust'][$gearType] = array('base' => 0);
   }
   
   print "\nPhase 1: (Find out which enhance level across all items of a 100% quality item can win)\n";
   
   for ($gearLevel = 0; $gearLevel < $maxEnhance; $gearLevel++) {
      foreach ($equipment as $gearType => $gearInfo) {
         $gearData['equip'][$gearType]['level'] = $gearLevel;
         $gearData['adjust'][$gearType]['base'] = 100;
      }
   
      $baseConfig['iterations'] = 10;
      $baseConfig['equip']  = json_encode($gearData['equip']);
      $baseConfig['adjust'] = json_encode($gearData['adjust']);
   
      printf("  - %2d: ",$gearLevel);
   
      $results = $simulator->start($baseConfig);
   
      $chanceWin = $results['attacker']['chance.win'];
   
      print "$chanceWin\n";
   
      if ($chanceWin >= $winThreshold) {
         $simInfo['phase1.level'] = ($gearLevel == 0) ? $gearLevel : $gearLevel - 1;
         print "  * Back level to ".$simInfo['phase1.level']." in order to fine tune results.\n";
         break;
      }
   
      //print $simulator->formatResults($results,array('short' => true))."\n\n";
   }
   
   
   if (!array_key_exists('phase1.level',$simInfo)) {
      print "\nSpecified gear and enhance levels cannot meet threshold to win\n";
      exit;
   }
   
   print "\nPhase 2: (Incrementally change enhance level by +1 in combination on each item)\n";
   
   $baseData = array();
   foreach ($equipment as $gearType => $gearInfo) {
      $baseData['equip'][$gearType]['level'] = $simInfo['phase1.level'];
      $baseData['adjust'][$gearType]['base'] = 100;
   }
   
   foreach ($equipment as $pGearType => $pGearInfo) {
      //$gearMatrix['equip'][$pGearType]['level']++;
      foreach ($equipment as $sGearType => $sGearInfo) {
         //if ($pGearType == $sGearType) { continue; }
         $gearMatrix = $baseData;
         $gearMatrix['equip'][$sGearType]['level']++;
         print "$pGearType/$sGearType: ".json_encode($gearMatrix['equip'])."\n";
      }
   }
}
*/

?>
<?php

?>
