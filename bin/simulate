#!/usr/bin/php
<?php
include_once 'miners-settlement-init.php';

include_once 'common/debug.class.php';
include_once 'local/simulator.class.php';
include_once 'local/battle.class.php';
include_once 'local/entity.class.php';
include_once 'local/item.class.php';
include_once 'local/rune.class.php';

$debug     = new Debug(9,DEBUG_CLI);
$item      = new Item($debug);
$item1     = new Item($debug);
$item2     = new Item($debug);
$attacker  = new Entity($debug);
$defender  = new Entity($debug);
$battle    = new Battle($debug);
$constants = new Constants($debug);
$simulator = new Simulator($debug);

$opts = getopt(null,array('verbose','debug:','type:','attacker:','defender:','iterations:'));

$debugLevel    = $opts['debug'] ?: 0;
$verbose       = (isset($opts['verbose'])) ? true : false;
$simulateType  = $opts['type'] ?: 'pve';
$attackerBuild = $opts['attacker'] ?: null;
$defenderBuild = $opts['defender'] ?: null;
$uIterations   = $opts['iterations'] ?: 100;

$simulateType = strtolower($simulateType);


if (preg_match('/^(pve|pvp)$/i',$simulateType) && $attackerBuild && $defenderBuild) { 
   $setup = array(
      'type'       => $simulateType,
      'attacker'   => array('id' => $attackerBuild),
      'defender'   => array('id' => $defenderBuild),
      'iterations' => $uIterations,
   );
}
else if ($simulateType == 'test-builds' && $attackerBuild && $defenderBuild) {
   $buildList = array();
   foreach (explode(',',$attackerBuild) as $build) { $buildList[$build]['id'] = $build; }

   $setup = array(
      'type'       => 'pve',
      'attacker'   => array('tests' => $buildList),
      'defender'   => array('id' => $defenderBuild),
      'iterations' => $uIterations,
   );
}
else { 
   // Sample two weapon test setup
   $setup = array(
      'type' => 'pve',
      'iterations' => $uIterations,
      'attacker' => array(
         'id' => 'sunflower-sotg-dragon',
         'tests' => array(
            'weaponA' => array(
               'gear'  => array(
                  'spear-of-the-gods' => array(
                     'values'  => array('health' => 278, 'attack' => 100, 'defense' => 67, 'speed' => 1.07, 'earth.damage' => 206, 'lightning.resist' => 51),
                     'options' => array('enhance'  => 7),
                  ),
               ),
            ),
            'weaponB' => array(
               'gear'  => array(
                  'spear-of-the-gods' => array(
                     'values' => array('health' => 539, 'attack' => 288, 'defense' => 86, 'speed' => 0.8, 'earth.damage' => 231, 'lightning.resist' => 143),
                     'options' => array('level'  => 7),
                  ),
               ),
            ),
         ),
      ),
      'defender' => array(
         'id'   => 'wind-dragon-83',
         'gear' => array(),
      ),
   );
}

$debug->level($debugLevel);


$tests = array();

$baseConfig = array(
   'attacker'   => array('id' => $setup['attacker']['id'], 'gear' => $setup['attacker']['gear']),
   'defender'   => array('id' => $setup['defender']['id'], 'gear' => $setup['defender']['gear']),
   'type'       => $setup['type'],
   'iterations' => $setup['iterations'],
);

$testList = ($setup['attacker']['tests']) ? array_keys($setup['attacker']['tests']) : array($setup['type']);

foreach ($testList as $testName) {
   $testConfig = $baseConfig;
   $overrides  = $setup['attacker']['tests'][$testName];
 
   if ($overrides['id'])   { $testConfig['attacker']['id'] = $overrides['id']; }
   if ($overrides['gear']) { $testConfig['attacker']['gear'] = $overrides['gear']; }

   $testConfig['label'] = $testName;

   $tests[$testName] = $testConfig;
}

foreach ($tests as $testName => $testInfo) {
   //print "\nStarting test $testName ".json_encode($testInfo)."\n\n";

   $results = $simulator->start($testInfo);

   if ($verbose) { print json_encode($results,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT)."\n"; }

   print $simulator->formatResults($results,$testName)."\n\n\n";
}

?>
